//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.03.01 at 10:38:42 AM GMT 
//


package com.integ.integration.services.contracts.common.test.dto;

import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for complexObjectB complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="complexObjectB"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://integ.com/integration/test/rest/qoteandbuy/api}abstractComplexObject"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="stringB" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "complexObjectB", propOrder = {
    "stringB"
})
public class ComplexObjectB
    extends AbstractComplexObject
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String stringB;

    /**
     * Default no-arg constructor
     * 
     */
    public ComplexObjectB() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public ComplexObjectB(final String string, final AbstractComplexObject _abstract, final List<AbstractComplexObject> abstracts, final String stringB) {
        super(string, _abstract, abstracts);
        this.stringB = stringB;
    }

    /**
     * Gets the value of the stringB property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStringB() {
        return stringB;
    }

    /**
     * Sets the value of the stringB property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStringB(String value) {
        this.stringB = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theStringB;
            theStringB = this.getStringB();
            strategy.appendField(locator, this, "stringB", buffer, theStringB);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ComplexObjectB that = ((ComplexObjectB) object);
        {
            String lhsStringB;
            lhsStringB = this.getStringB();
            String rhsStringB;
            rhsStringB = that.getStringB();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stringB", lhsStringB), LocatorUtils.property(thatLocator, "stringB", rhsStringB), lhsStringB, rhsStringB)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theStringB;
            theStringB = this.getStringB();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stringB", theStringB), currentHashCode, theStringB);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ComplexObjectB) {
            final ComplexObjectB copy = ((ComplexObjectB) draftCopy);
            if (this.stringB!= null) {
                String sourceStringB;
                sourceStringB = this.getStringB();
                String copyStringB = ((String) strategy.copy(LocatorUtils.property(locator, "stringB", sourceStringB), sourceStringB));
                copy.setStringB(copyStringB);
            } else {
                copy.stringB = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ComplexObjectB();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ComplexObjectB) {
            final ComplexObjectB target = this;
            final ComplexObjectB leftObject = ((ComplexObjectB) left);
            final ComplexObjectB rightObject = ((ComplexObjectB) right);
            {
                String lhsStringB;
                lhsStringB = leftObject.getStringB();
                String rhsStringB;
                rhsStringB = rightObject.getStringB();
                String mergedStringB = ((String) strategy.merge(LocatorUtils.property(leftLocator, "stringB", lhsStringB), LocatorUtils.property(rightLocator, "stringB", rhsStringB), lhsStringB, rhsStringB));
                target.setStringB(mergedStringB);
            }
        }
    }

}
