//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.03.01 at 10:38:42 AM GMT 
//


package com.integ.integration.services.contracts.common.test.dto;

import com.integ.integration.services.contracts.common.rest.ResponseCode;
import org.jvnet.jaxb2_commons.lang.*;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.ws.rs.core.Response;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import java.util.List;


/**
 * <p>Java class for complexObjectA complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="complexObjectA"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://integ.com/integration/test/rest/qoteandbuy/api}abstractComplexObject"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="stringA" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "complexObjectA", propOrder = {
    "stringA"
})
@ResponseCode(Response.Status.CREATED)
@XmlRootElement
public class ComplexObjectA
    extends AbstractComplexObject
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String stringA;

    /**
     * Default no-arg constructor
     * 
     */
    public ComplexObjectA() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public ComplexObjectA(final String string, final AbstractComplexObject _abstract, final List<AbstractComplexObject> abstracts, final String stringA) {
        super(string, _abstract, abstracts);
        this.stringA = stringA;
    }

    /**
     * Gets the value of the stringA property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStringA() {
        return stringA;
    }

    /**
     * Sets the value of the stringA property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStringA(String value) {
        this.stringA = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theStringA;
            theStringA = this.getStringA();
            strategy.appendField(locator, this, "stringA", buffer, theStringA);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ComplexObjectA that = ((ComplexObjectA) object);
        {
            String lhsStringA;
            lhsStringA = this.getStringA();
            String rhsStringA;
            rhsStringA = that.getStringA();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stringA", lhsStringA), LocatorUtils.property(thatLocator, "stringA", rhsStringA), lhsStringA, rhsStringA)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theStringA;
            theStringA = this.getStringA();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stringA", theStringA), currentHashCode, theStringA);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ComplexObjectA) {
            final ComplexObjectA copy = ((ComplexObjectA) draftCopy);
            if (this.stringA!= null) {
                String sourceStringA;
                sourceStringA = this.getStringA();
                String copyStringA = ((String) strategy.copy(LocatorUtils.property(locator, "stringA", sourceStringA), sourceStringA));
                copy.setStringA(copyStringA);
            } else {
                copy.stringA = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ComplexObjectA();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ComplexObjectA) {
            final ComplexObjectA target = this;
            final ComplexObjectA leftObject = ((ComplexObjectA) left);
            final ComplexObjectA rightObject = ((ComplexObjectA) right);
            {
                String lhsStringA;
                lhsStringA = leftObject.getStringA();
                String rhsStringA;
                rhsStringA = rightObject.getStringA();
                String mergedStringA = ((String) strategy.merge(LocatorUtils.property(leftLocator, "stringA", lhsStringA), LocatorUtils.property(rightLocator, "stringA", rhsStringA), lhsStringA, rhsStringA));
                target.setStringA(mergedStringA);
            }
        }
    }

}
