//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.03.01 at 10:38:42 AM GMT 
//


package com.integ.integration.services.contracts.common.test.dto;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for abstractComplexObject complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="abstractComplexObject"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://integ.com/integration/test/rest/qoteandbuy/api}AbstractDummy"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="string" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="abstract" type="{http://integ.com/integration/test/rest/qoteandbuy/api}abstractComplexObject" minOccurs="0"/&gt;
 *         &lt;element name="abstracts" type="{http://integ.com/integration/test/rest/qoteandbuy/api}abstractComplexObject" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "abstractComplexObject", propOrder = {
    "string",
    "_abstract",
    "abstracts"
})
@XmlSeeAlso({
    ComplexObjectA.class,
    ComplexObjectB.class,
    AbstractDummyResponse.class,
    AbstractDummyRequest.class
})
@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)
@JsonSubTypes({
    @JsonSubTypes.Type(name = "com.integ.integration.services.contracts.common.test.dto.ComplexObjectA", value = ComplexObjectA.class),
    @JsonSubTypes.Type(name = "com.integ.integration.services.contracts.common.test.dto.ComplexObjectB", value = ComplexObjectB.class)
})
public abstract class AbstractComplexObject
    extends AbstractDummy
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String string;
    @XmlElement(name = "abstract")
    protected AbstractComplexObject _abstract;
    protected List<AbstractComplexObject> abstracts;

    /**
     * Default no-arg constructor
     * 
     */
    public AbstractComplexObject() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public AbstractComplexObject(final String string, final AbstractComplexObject _abstract, final List<AbstractComplexObject> abstracts) {
        super();
        this.string = string;
        this._abstract = _abstract;
        this.abstracts = abstracts;
    }

    /**
     * Gets the value of the string property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getString() {
        return string;
    }

    /**
     * Sets the value of the string property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setString(String value) {
        this.string = value;
    }

    /**
     * Gets the value of the abstract property.
     * 
     * @return
     *     possible object is
     *     {@link AbstractComplexObject }
     *     
     */
    public AbstractComplexObject getAbstract() {
        return _abstract;
    }

    /**
     * Sets the value of the abstract property.
     * 
     * @param value
     *     allowed object is
     *     {@link AbstractComplexObject }
     *     
     */
    public void setAbstract(AbstractComplexObject value) {
        this._abstract = value;
    }

    /**
     * Gets the value of the abstracts property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the abstracts property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAbstracts().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AbstractComplexObject }
     * 
     * 
     */
    public List<AbstractComplexObject> getAbstracts() {
        if (abstracts == null) {
            abstracts = new ArrayList<AbstractComplexObject>();
        }
        return this.abstracts;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theString;
            theString = this.getString();
            strategy.appendField(locator, this, "string", buffer, theString);
        }
        {
            AbstractComplexObject theAbstract;
            theAbstract = this.getAbstract();
            strategy.appendField(locator, this, "_abstract", buffer, theAbstract);
        }
        {
            List<AbstractComplexObject> theAbstracts;
            theAbstracts = (((this.abstracts!= null)&&(!this.abstracts.isEmpty()))?this.getAbstracts():null);
            strategy.appendField(locator, this, "abstracts", buffer, theAbstracts);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractComplexObject that = ((AbstractComplexObject) object);
        {
            String lhsString;
            lhsString = this.getString();
            String rhsString;
            rhsString = that.getString();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "string", lhsString), LocatorUtils.property(thatLocator, "string", rhsString), lhsString, rhsString)) {
                return false;
            }
        }
        {
            AbstractComplexObject lhsAbstract;
            lhsAbstract = this.getAbstract();
            AbstractComplexObject rhsAbstract;
            rhsAbstract = that.getAbstract();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "_abstract", lhsAbstract), LocatorUtils.property(thatLocator, "_abstract", rhsAbstract), lhsAbstract, rhsAbstract)) {
                return false;
            }
        }
        {
            List<AbstractComplexObject> lhsAbstracts;
            lhsAbstracts = (((this.abstracts!= null)&&(!this.abstracts.isEmpty()))?this.getAbstracts():null);
            List<AbstractComplexObject> rhsAbstracts;
            rhsAbstracts = (((that.abstracts!= null)&&(!that.abstracts.isEmpty()))?that.getAbstracts():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "abstracts", lhsAbstracts), LocatorUtils.property(thatLocator, "abstracts", rhsAbstracts), lhsAbstracts, rhsAbstracts)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theString;
            theString = this.getString();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "string", theString), currentHashCode, theString);
        }
        {
            AbstractComplexObject theAbstract;
            theAbstract = this.getAbstract();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "_abstract", theAbstract), currentHashCode, theAbstract);
        }
        {
            List<AbstractComplexObject> theAbstracts;
            theAbstracts = (((this.abstracts!= null)&&(!this.abstracts.isEmpty()))?this.getAbstracts():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "abstracts", theAbstracts), currentHashCode, theAbstracts);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractComplexObject) {
            final AbstractComplexObject copy = ((AbstractComplexObject) target);
            if (this.string!= null) {
                String sourceString;
                sourceString = this.getString();
                String copyString = ((String) strategy.copy(LocatorUtils.property(locator, "string", sourceString), sourceString));
                copy.setString(copyString);
            } else {
                copy.string = null;
            }
            if (this._abstract!= null) {
                AbstractComplexObject sourceAbstract;
                sourceAbstract = this.getAbstract();
                AbstractComplexObject copyAbstract = ((AbstractComplexObject) strategy.copy(LocatorUtils.property(locator, "_abstract", sourceAbstract), sourceAbstract));
                copy.setAbstract(copyAbstract);
            } else {
                copy._abstract = null;
            }
            if ((this.abstracts!= null)&&(!this.abstracts.isEmpty())) {
                List<AbstractComplexObject> sourceAbstracts;
                sourceAbstracts = (((this.abstracts!= null)&&(!this.abstracts.isEmpty()))?this.getAbstracts():null);
                @SuppressWarnings("unchecked")
                List<AbstractComplexObject> copyAbstracts = ((List<AbstractComplexObject> ) strategy.copy(LocatorUtils.property(locator, "abstracts", sourceAbstracts), sourceAbstracts));
                copy.abstracts = null;
                if (copyAbstracts!= null) {
                    List<AbstractComplexObject> uniqueAbstractsl = copy.getAbstracts();
                    uniqueAbstractsl.addAll(copyAbstracts);
                }
            } else {
                copy.abstracts = null;
            }
        }
        return target;
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof AbstractComplexObject) {
            final AbstractComplexObject target = this;
            final AbstractComplexObject leftObject = ((AbstractComplexObject) left);
            final AbstractComplexObject rightObject = ((AbstractComplexObject) right);
            {
                String lhsString;
                lhsString = leftObject.getString();
                String rhsString;
                rhsString = rightObject.getString();
                String mergedString = ((String) strategy.merge(LocatorUtils.property(leftLocator, "string", lhsString), LocatorUtils.property(rightLocator, "string", rhsString), lhsString, rhsString));
                target.setString(mergedString);
            }
            {
                AbstractComplexObject lhsAbstract;
                lhsAbstract = leftObject.getAbstract();
                AbstractComplexObject rhsAbstract;
                rhsAbstract = rightObject.getAbstract();
                AbstractComplexObject mergedAbstract = ((AbstractComplexObject) strategy.merge(LocatorUtils.property(leftLocator, "_abstract", lhsAbstract), LocatorUtils.property(rightLocator, "_abstract", rhsAbstract), lhsAbstract, rhsAbstract));
                target.setAbstract(mergedAbstract);
            }
            {
                List<AbstractComplexObject> lhsAbstracts;
                lhsAbstracts = (((leftObject.abstracts!= null)&&(!leftObject.abstracts.isEmpty()))?leftObject.getAbstracts():null);
                List<AbstractComplexObject> rhsAbstracts;
                rhsAbstracts = (((rightObject.abstracts!= null)&&(!rightObject.abstracts.isEmpty()))?rightObject.getAbstracts():null);
                List<AbstractComplexObject> mergedAbstracts = ((List<AbstractComplexObject> ) strategy.merge(LocatorUtils.property(leftLocator, "abstracts", lhsAbstracts), LocatorUtils.property(rightLocator, "abstracts", rhsAbstracts), lhsAbstracts, rhsAbstracts));
                target.abstracts = null;
                if (mergedAbstracts!= null) {
                    List<AbstractComplexObject> uniqueAbstractsl = target.getAbstracts();
                    uniqueAbstractsl.addAll(mergedAbstracts);
                }
            }
        }
    }

}
