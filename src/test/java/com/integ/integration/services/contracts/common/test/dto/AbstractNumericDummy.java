//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.03.01 at 10:38:42 AM GMT 
//


package com.integ.integration.services.contracts.common.test.dto;

import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for AbstractNumericDummy complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractNumericDummy"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://integ.com/integration/test/rest/qoteandbuy/api}AbstractDummy"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="dn" type="{http://www.w3.org/2001/XMLSchema}decimal"/&gt;
 *         &lt;element name="in" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *         &lt;element name="ln" type="{http://www.w3.org/2001/XMLSchema}long"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractNumericDummy", propOrder = {
    "dn",
    "in",
    "ln"
})
@XmlSeeAlso({
    NumericDummyResponse.class,
    NumericDummyRequest.class
})
public abstract class AbstractNumericDummy
    extends AbstractDummy
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected BigDecimal dn;
    protected int in;
    protected long ln;

    /**
     * Default no-arg constructor
     * 
     */
    public AbstractNumericDummy() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public AbstractNumericDummy(final BigDecimal dn, final int in, final long ln) {
        super();
        this.dn = dn;
        this.in = in;
        this.ln = ln;
    }

    /**
     * Gets the value of the dn property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getDn() {
        return dn;
    }

    /**
     * Sets the value of the dn property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setDn(BigDecimal value) {
        this.dn = value;
    }

    /**
     * Gets the value of the in property.
     * 
     */
    public int getIn() {
        return in;
    }

    /**
     * Sets the value of the in property.
     * 
     */
    public void setIn(int value) {
        this.in = value;
    }

    /**
     * Gets the value of the ln property.
     * 
     */
    public long getLn() {
        return ln;
    }

    /**
     * Sets the value of the ln property.
     * 
     */
    public void setLn(long value) {
        this.ln = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            BigDecimal theDn;
            theDn = this.getDn();
            strategy.appendField(locator, this, "dn", buffer, theDn);
        }
        {
            int theIn;
            theIn = this.getIn();
            strategy.appendField(locator, this, "in", buffer, theIn);
        }
        {
            long theLn;
            theLn = this.getLn();
            strategy.appendField(locator, this, "ln", buffer, theLn);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractNumericDummy that = ((AbstractNumericDummy) object);
        {
            BigDecimal lhsDn;
            lhsDn = this.getDn();
            BigDecimal rhsDn;
            rhsDn = that.getDn();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dn", lhsDn), LocatorUtils.property(thatLocator, "dn", rhsDn), lhsDn, rhsDn)) {
                return false;
            }
        }
        {
            int lhsIn;
            lhsIn = this.getIn();
            int rhsIn;
            rhsIn = that.getIn();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "in", lhsIn), LocatorUtils.property(thatLocator, "in", rhsIn), lhsIn, rhsIn)) {
                return false;
            }
        }
        {
            long lhsLn;
            lhsLn = this.getLn();
            long rhsLn;
            rhsLn = that.getLn();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ln", lhsLn), LocatorUtils.property(thatLocator, "ln", rhsLn), lhsLn, rhsLn)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            BigDecimal theDn;
            theDn = this.getDn();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dn", theDn), currentHashCode, theDn);
        }
        {
            int theIn;
            theIn = this.getIn();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "in", theIn), currentHashCode, theIn);
        }
        {
            long theLn;
            theLn = this.getLn();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ln", theLn), currentHashCode, theLn);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractNumericDummy) {
            final AbstractNumericDummy copy = ((AbstractNumericDummy) target);
            if (this.dn!= null) {
                BigDecimal sourceDn;
                sourceDn = this.getDn();
                BigDecimal copyDn = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "dn", sourceDn), sourceDn));
                copy.setDn(copyDn);
            } else {
                copy.dn = null;
            }
            {
                int sourceIn;
                sourceIn = this.getIn();
                int copyIn = strategy.copy(LocatorUtils.property(locator, "in", sourceIn), sourceIn);
                copy.setIn(copyIn);
            }
            {
                long sourceLn;
                sourceLn = this.getLn();
                long copyLn = strategy.copy(LocatorUtils.property(locator, "ln", sourceLn), sourceLn);
                copy.setLn(copyLn);
            }
        }
        return target;
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof AbstractNumericDummy) {
            final AbstractNumericDummy target = this;
            final AbstractNumericDummy leftObject = ((AbstractNumericDummy) left);
            final AbstractNumericDummy rightObject = ((AbstractNumericDummy) right);
            {
                BigDecimal lhsDn;
                lhsDn = leftObject.getDn();
                BigDecimal rhsDn;
                rhsDn = rightObject.getDn();
                BigDecimal mergedDn = ((BigDecimal) strategy.merge(LocatorUtils.property(leftLocator, "dn", lhsDn), LocatorUtils.property(rightLocator, "dn", rhsDn), lhsDn, rhsDn));
                target.setDn(mergedDn);
            }
            {
                int lhsIn;
                lhsIn = leftObject.getIn();
                int rhsIn;
                rhsIn = rightObject.getIn();
                int mergedIn = ((int) strategy.merge(LocatorUtils.property(leftLocator, "in", lhsIn), LocatorUtils.property(rightLocator, "in", rhsIn), lhsIn, rhsIn));
                target.setIn(mergedIn);
            }
            {
                long lhsLn;
                lhsLn = leftObject.getLn();
                long rhsLn;
                rhsLn = rightObject.getLn();
                long mergedLn = ((long) strategy.merge(LocatorUtils.property(leftLocator, "ln", lhsLn), LocatorUtils.property(rightLocator, "ln", rhsLn), lhsLn, rhsLn));
                target.setLn(mergedLn);
            }
        }
    }

}
