//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.03.01 at 10:38:42 AM GMT 
//


package com.integ.integration.services.contracts.common.test.dto;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for faultDetails complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="faultDetails"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="error" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="key" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *                   &lt;element name="code" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="message" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="text" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *                   &lt;element name="lang" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="hint" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "faultDetails", namespace = "http://integ.com/integration/services/contracts/common", propOrder = {
    "error",
    "message",
    "hint"
})
public class FaultDetails implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected Error error;
    protected Message message;
    protected List<String> hint;

    /**
     * Default no-arg constructor
     * 
     */
    public FaultDetails() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public FaultDetails(final Error error, final Message message, final List<String> hint) {
        this.error = error;
        this.message = message;
        this.hint = hint;
    }

    /**
     * Gets the value of the error property.
     * 
     * @return
     *     possible object is
     *     {@link Error }
     *     
     */
    public Error getError() {
        return error;
    }

    /**
     * Sets the value of the error property.
     * 
     * @param value
     *     allowed object is
     *     {@link Error }
     *     
     */
    public void setError(Error value) {
        this.error = value;
    }

    /**
     * Gets the value of the message property.
     * 
     * @return
     *     possible object is
     *     {@link Message }
     *     
     */
    public Message getMessage() {
        return message;
    }

    /**
     * Sets the value of the message property.
     * 
     * @param value
     *     allowed object is
     *     {@link Message }
     *     
     */
    public void setMessage(Message value) {
        this.message = value;
    }

    /**
     * Gets the value of the hint property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the hint property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getHint().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getHint() {
        if (hint == null) {
            hint = new ArrayList<String>();
        }
        return this.hint;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Error theError;
            theError = this.getError();
            strategy.appendField(locator, this, "error", buffer, theError);
        }
        {
            Message theMessage;
            theMessage = this.getMessage();
            strategy.appendField(locator, this, "message", buffer, theMessage);
        }
        {
            List<String> theHint;
            theHint = (((this.hint!= null)&&(!this.hint.isEmpty()))?this.getHint():null);
            strategy.appendField(locator, this, "hint", buffer, theHint);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final FaultDetails that = ((FaultDetails) object);
        {
            Error lhsError;
            lhsError = this.getError();
            Error rhsError;
            rhsError = that.getError();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "error", lhsError), LocatorUtils.property(thatLocator, "error", rhsError), lhsError, rhsError)) {
                return false;
            }
        }
        {
            Message lhsMessage;
            lhsMessage = this.getMessage();
            Message rhsMessage;
            rhsMessage = that.getMessage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "message", lhsMessage), LocatorUtils.property(thatLocator, "message", rhsMessage), lhsMessage, rhsMessage)) {
                return false;
            }
        }
        {
            List<String> lhsHint;
            lhsHint = (((this.hint!= null)&&(!this.hint.isEmpty()))?this.getHint():null);
            List<String> rhsHint;
            rhsHint = (((that.hint!= null)&&(!that.hint.isEmpty()))?that.getHint():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hint", lhsHint), LocatorUtils.property(thatLocator, "hint", rhsHint), lhsHint, rhsHint)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Error theError;
            theError = this.getError();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "error", theError), currentHashCode, theError);
        }
        {
            Message theMessage;
            theMessage = this.getMessage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "message", theMessage), currentHashCode, theMessage);
        }
        {
            List<String> theHint;
            theHint = (((this.hint!= null)&&(!this.hint.isEmpty()))?this.getHint():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hint", theHint), currentHashCode, theHint);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof FaultDetails) {
            final FaultDetails copy = ((FaultDetails) draftCopy);
            if (this.error!= null) {
                Error sourceError;
                sourceError = this.getError();
                Error copyError = ((Error) strategy.copy(LocatorUtils.property(locator, "error", sourceError), sourceError));
                copy.setError(copyError);
            } else {
                copy.error = null;
            }
            if (this.message!= null) {
                Message sourceMessage;
                sourceMessage = this.getMessage();
                Message copyMessage = ((Message) strategy.copy(LocatorUtils.property(locator, "message", sourceMessage), sourceMessage));
                copy.setMessage(copyMessage);
            } else {
                copy.message = null;
            }
            if ((this.hint!= null)&&(!this.hint.isEmpty())) {
                List<String> sourceHint;
                sourceHint = (((this.hint!= null)&&(!this.hint.isEmpty()))?this.getHint():null);
                @SuppressWarnings("unchecked")
                List<String> copyHint = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "hint", sourceHint), sourceHint));
                copy.hint = null;
                if (copyHint!= null) {
                    List<String> uniqueHintl = copy.getHint();
                    uniqueHintl.addAll(copyHint);
                }
            } else {
                copy.hint = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new FaultDetails();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof FaultDetails) {
            final FaultDetails target = this;
            final FaultDetails leftObject = ((FaultDetails) left);
            final FaultDetails rightObject = ((FaultDetails) right);
            {
                Error lhsError;
                lhsError = leftObject.getError();
                Error rhsError;
                rhsError = rightObject.getError();
                Error mergedError = ((Error) strategy.merge(LocatorUtils.property(leftLocator, "error", lhsError), LocatorUtils.property(rightLocator, "error", rhsError), lhsError, rhsError));
                target.setError(mergedError);
            }
            {
                Message lhsMessage;
                lhsMessage = leftObject.getMessage();
                Message rhsMessage;
                rhsMessage = rightObject.getMessage();
                Message mergedMessage = ((Message) strategy.merge(LocatorUtils.property(leftLocator, "message", lhsMessage), LocatorUtils.property(rightLocator, "message", rhsMessage), lhsMessage, rhsMessage));
                target.setMessage(mergedMessage);
            }
            {
                List<String> lhsHint;
                lhsHint = (((leftObject.hint!= null)&&(!leftObject.hint.isEmpty()))?leftObject.getHint():null);
                List<String> rhsHint;
                rhsHint = (((rightObject.hint!= null)&&(!rightObject.hint.isEmpty()))?rightObject.getHint():null);
                List<String> mergedHint = ((List<String> ) strategy.merge(LocatorUtils.property(leftLocator, "hint", lhsHint), LocatorUtils.property(rightLocator, "hint", rhsHint), lhsHint, rhsHint));
                target.hint = null;
                if (mergedHint!= null) {
                    List<String> uniqueHintl = target.getHint();
                    uniqueHintl.addAll(mergedHint);
                }
            }
        }
    }

}
